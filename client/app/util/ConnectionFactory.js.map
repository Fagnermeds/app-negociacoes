{"version":3,"sources":["../../app-src/util/ConnectionFactory.js"],"names":["ConnectionFactory","stores","connection","close","constructor","Error","getConnection","Promise","resolve","reject","openRequest","indexedDB","open","onupgradeneeded","e","_creatStores","target","result","onsuccess","bind","onerror","error","name","forEach","store","objectStoreNames","contains","deleteObjectStore","createObjectStore","autoIncrement","closeConnection"],"mappings":";;;;;;AAAA;AACA,kBAAMA,oBAAoB,CAAC,MAAM;;AAE7B,sBAAMC,SAAS,CAAC,aAAD,CAAf;AACA,oBAAIC,aAAa,IAAjB;AACA,oBAAIC,QAAQ,IAAZ;;AAEA,uBAAO,MAAMH,iBAAN,CAAuB;;AAE1BI,kCAAa;AACT,8BAAM,IAAIC,KAAJ,CAAU,0CAAV,CAAN;AACH;;AAED,2BAAOC,aAAP,GAAsB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;;AAEpC,gCAAGP,UAAH,EAAe,OAAOM,QAAQN,UAAR,CAAP;;AAEf,kCAAMQ,cAAcC,UAAUC,IAAV,CAAe,cAAf,EAA+B,CAA/B,CAApB;;AAEAF,wCAAYG,eAAZ,GAA8BC,KAAK;AAC/Bd,kDAAkBe,YAAlB,CAA+BD,EAAEE,MAAF,CAASC,MAAxC;AACH,6BAFD;;AAIAP,wCAAYQ,SAAZ,GAAwBJ,KAAK;AACzBZ,6CAAaY,EAAEE,MAAF,CAASC,MAAtB;AACAd,wCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;;AAEAA,2CAAWC,KAAX,GAAmB,MAAK;AACpB,0CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,iCAFD;AAGAG,wCAAQM,EAAEE,MAAF,CAASC,MAAjB;AACH,6BARD;;AAUAP,wCAAYU,OAAZ,GAAsBN,KAAK;AACvBL,uCAAOK,EAAEE,MAAF,CAASK,KAAT,CAAeC,IAAtB;AACH,6BAFD;AAIH,yBAxBM,CAAP;AAyBH;;AAED,2BAAOP,YAAP,CAAoBb,UAApB,EAA+B;AAC3BD,+BAAOsB,OAAP,CAAeC,SAAQ;AACnB,gCAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCF,KAArC,CAAH,EACItB,WAAWyB,iBAAX,CAA6BH,KAA7B;AACJtB,uCAAW0B,iBAAX,CAA6BJ,KAA7B,EAAoC,EAAEK,eAAgB,IAAlB,EAApC;AACH,yBAJD;AAKH;;AAED,2BAAOC,eAAP,GAAwB;AACpB,4BAAG5B,UAAH,EAAc;AACVC;AACH;AACJ;AA9CyB,iBAA9B;AAgDH,aAtDyB,GAA1B","file":"ConnectionFactory.js","sourcesContent":["// Padrão de projeto MODULE PATTERN\nconst ConnectionFactory = (() => {\n    \n    const stores = ['negociacoes'];\n    let connection = null;\n    let close = null;\n\n    return class ConnectionFactory{\n    \n        constructor(){\n            throw new Error('Unable to create instances of this class');\n        }\n    \n        static getConnection(){\n            return new Promise((resolve, reject) => {\n    \n                if(connection) return resolve(connection);\n    \n                const openRequest = indexedDB.open('jscangaceiro', 2);\n    \n                openRequest.onupgradeneeded = e => {\n                    ConnectionFactory._creatStores(e.target.result);\n                }\n                \n                openRequest.onsuccess = e => {\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n\n                    connection.close = () =>{\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    }\n                    resolve(e.target.result);\n                }\n                \n                openRequest.onerror = e => {\n                    reject(e.target.error.name);\n                }\n    \n            });\n        }\n    \n        static _creatStores(connection){\n            stores.forEach(store =>{\n                if(connection.objectStoreNames.contains(store))\n                    connection.deleteObjectStore(store);\n                connection.createObjectStore(store, { autoIncrement : true });\n            });\n        }\n\n        static closeConnection(){\n            if(connection){\n                close();\n            }\n        }\n    }\n})();\n"]}